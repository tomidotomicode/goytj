/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyBusinessId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyBusinessId{}

// CompanyBusinessId Y-tunnus, esim 0116297-6
type CompanyBusinessId struct {
	// Y-tunnus
	Value string `json:"value"`
	// Y-tunnuksen antamisp채iv채
	RegistrationDate NullableString `json:"registrationDate,omitempty"`
	// <a aria-label=\"Tietol채hde, avautuu uudessa ikkunassa\" rel=\"noopener\" href=\"/opendata-ytj-api/v3/description?code=TLAHDE&lang=fi\">Tietol채hde <svg width=\"15\" height=\"14\" viewBox=\"0 -9 24 24\"> <path margin=\"0\" fill=\"#035ca7\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708\"></path></svg></a> 
	Source string `json:"source"`
}

type _CompanyBusinessId CompanyBusinessId

// NewCompanyBusinessId instantiates a new CompanyBusinessId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyBusinessId(value string, source string) *CompanyBusinessId {
	this := CompanyBusinessId{}
	this.Value = value
	this.Source = source
	return &this
}

// NewCompanyBusinessIdWithDefaults instantiates a new CompanyBusinessId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyBusinessIdWithDefaults() *CompanyBusinessId {
	this := CompanyBusinessId{}
	return &this
}

// GetValue returns the Value field value
func (o *CompanyBusinessId) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CompanyBusinessId) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CompanyBusinessId) SetValue(v string) {
	o.Value = v
}

// GetRegistrationDate returns the RegistrationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyBusinessId) GetRegistrationDate() string {
	if o == nil || IsNil(o.RegistrationDate.Get()) {
		var ret string
		return ret
	}
	return *o.RegistrationDate.Get()
}

// GetRegistrationDateOk returns a tuple with the RegistrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyBusinessId) GetRegistrationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationDate.Get(), o.RegistrationDate.IsSet()
}

// HasRegistrationDate returns a boolean if a field has been set.
func (o *CompanyBusinessId) HasRegistrationDate() bool {
	if o != nil && o.RegistrationDate.IsSet() {
		return true
	}

	return false
}

// SetRegistrationDate gets a reference to the given NullableString and assigns it to the RegistrationDate field.
func (o *CompanyBusinessId) SetRegistrationDate(v string) {
	o.RegistrationDate.Set(&v)
}
// SetRegistrationDateNil sets the value for RegistrationDate to be an explicit nil
func (o *CompanyBusinessId) SetRegistrationDateNil() {
	o.RegistrationDate.Set(nil)
}

// UnsetRegistrationDate ensures that no value is present for RegistrationDate, not even an explicit nil
func (o *CompanyBusinessId) UnsetRegistrationDate() {
	o.RegistrationDate.Unset()
}

// GetSource returns the Source field value
func (o *CompanyBusinessId) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CompanyBusinessId) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *CompanyBusinessId) SetSource(v string) {
	o.Source = v
}

func (o CompanyBusinessId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyBusinessId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	if o.RegistrationDate.IsSet() {
		toSerialize["registrationDate"] = o.RegistrationDate.Get()
	}
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *CompanyBusinessId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyBusinessId := _CompanyBusinessId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyBusinessId)

	if err != nil {
		return err
	}

	*o = CompanyBusinessId(varCompanyBusinessId)

	return err
}

type NullableCompanyBusinessId struct {
	value *CompanyBusinessId
	isSet bool
}

func (v NullableCompanyBusinessId) Get() *CompanyBusinessId {
	return v.value
}

func (v *NullableCompanyBusinessId) Set(val *CompanyBusinessId) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyBusinessId) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyBusinessId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyBusinessId(val *CompanyBusinessId) *NullableCompanyBusinessId {
	return &NullableCompanyBusinessId{value: val, isSet: true}
}

func (v NullableCompanyBusinessId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyBusinessId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


