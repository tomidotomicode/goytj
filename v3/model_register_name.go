/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterName{}

// RegisterName Nimitiedot
type RegisterName struct {
	// Toiminimi
	Name string `json:"name"`
	// [Nimen tyyppi](/opendata-ytj-api/v3/description?code=TLAJI&lang=fi) 
	Type string `json:"type"`
	// Rekisteröintipäivämäärä muodossa vvvv-kk-pp
	RegistrationDate NullableString `json:"registrationDate,omitempty"`
	// Rekisteröinnin loppupäivämäärä muodossa vvvv-kk-pp
	EndDate NullableString `json:"endDate,omitempty"`
	// Versio, 1 nykyinen versio, muut numerot aiempia versioita
	Version int32 `json:"version"`
	// <a aria-label=\"Tietolähde, avautuu uudessa ikkunassa\" rel=\"noopener\" href=\"/opendata-ytj-api/v3/description?code=TLAHDE&lang=fi\">Tietolähde <svg width=\"15\" height=\"14\" viewBox=\"0 -9 24 24\"> <path margin=\"0\" fill=\"#035ca7\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708\"></path></svg></a> 
	Source string `json:"source"`
}

type _RegisterName RegisterName

// NewRegisterName instantiates a new RegisterName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterName(name string, type_ string, version int32, source string) *RegisterName {
	this := RegisterName{}
	this.Name = name
	this.Type = type_
	this.Version = version
	this.Source = source
	return &this
}

// NewRegisterNameWithDefaults instantiates a new RegisterName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterNameWithDefaults() *RegisterName {
	this := RegisterName{}
	return &this
}

// GetName returns the Name field value
func (o *RegisterName) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegisterName) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegisterName) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *RegisterName) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RegisterName) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RegisterName) SetType(v string) {
	o.Type = v
}

// GetRegistrationDate returns the RegistrationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterName) GetRegistrationDate() string {
	if o == nil || IsNil(o.RegistrationDate.Get()) {
		var ret string
		return ret
	}
	return *o.RegistrationDate.Get()
}

// GetRegistrationDateOk returns a tuple with the RegistrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterName) GetRegistrationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationDate.Get(), o.RegistrationDate.IsSet()
}

// HasRegistrationDate returns a boolean if a field has been set.
func (o *RegisterName) HasRegistrationDate() bool {
	if o != nil && o.RegistrationDate.IsSet() {
		return true
	}

	return false
}

// SetRegistrationDate gets a reference to the given NullableString and assigns it to the RegistrationDate field.
func (o *RegisterName) SetRegistrationDate(v string) {
	o.RegistrationDate.Set(&v)
}
// SetRegistrationDateNil sets the value for RegistrationDate to be an explicit nil
func (o *RegisterName) SetRegistrationDateNil() {
	o.RegistrationDate.Set(nil)
}

// UnsetRegistrationDate ensures that no value is present for RegistrationDate, not even an explicit nil
func (o *RegisterName) UnsetRegistrationDate() {
	o.RegistrationDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterName) GetEndDate() string {
	if o == nil || IsNil(o.EndDate.Get()) {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterName) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *RegisterName) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *RegisterName) SetEndDate(v string) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *RegisterName) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *RegisterName) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetVersion returns the Version field value
func (o *RegisterName) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *RegisterName) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *RegisterName) SetVersion(v int32) {
	o.Version = v
}

// GetSource returns the Source field value
func (o *RegisterName) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *RegisterName) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *RegisterName) SetSource(v string) {
	o.Source = v
}

func (o RegisterName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if o.RegistrationDate.IsSet() {
		toSerialize["registrationDate"] = o.RegistrationDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	toSerialize["version"] = o.Version
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *RegisterName) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"version",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterName := _RegisterName{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterName)

	if err != nil {
		return err
	}

	*o = RegisterName(varRegisterName)

	return err
}

type NullableRegisterName struct {
	value *RegisterName
	isSet bool
}

func (v NullableRegisterName) Get() *RegisterName {
	return v.value
}

func (v *NullableRegisterName) Set(val *RegisterName) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterName) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterName(val *RegisterName) *NullableRegisterName {
	return &NullableRegisterName{value: val, isSet: true}
}

func (v NullableRegisterName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


