/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyEuId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyEuId{}

// CompanyEuId EUID-tunnus, esim FIFPRO.0116297-6
type CompanyEuId struct {
	// EUID tunnus
	Value string `json:"value"`
	// <a aria-label=\"Tietolähde, avautuu uudessa ikkunassa\" rel=\"noopener\" href=\"/opendata-ytj-api/v3/description?code=TLAHDE&lang=fi\">Tietolähde <svg width=\"15\" height=\"14\" viewBox=\"0 -9 24 24\"> <path margin=\"0\" fill=\"#035ca7\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708\"></path></svg></a> 
	Source string `json:"source"`
}

type _CompanyEuId CompanyEuId

// NewCompanyEuId instantiates a new CompanyEuId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyEuId(value string, source string) *CompanyEuId {
	this := CompanyEuId{}
	this.Value = value
	this.Source = source
	return &this
}

// NewCompanyEuIdWithDefaults instantiates a new CompanyEuId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyEuIdWithDefaults() *CompanyEuId {
	this := CompanyEuId{}
	return &this
}

// GetValue returns the Value field value
func (o *CompanyEuId) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CompanyEuId) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CompanyEuId) SetValue(v string) {
	o.Value = v
}

// GetSource returns the Source field value
func (o *CompanyEuId) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CompanyEuId) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *CompanyEuId) SetSource(v string) {
	o.Source = v
}

func (o CompanyEuId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyEuId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *CompanyEuId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyEuId := _CompanyEuId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyEuId)

	if err != nil {
		return err
	}

	*o = CompanyEuId(varCompanyEuId)

	return err
}

type NullableCompanyEuId struct {
	value *CompanyEuId
	isSet bool
}

func (v NullableCompanyEuId) Get() *CompanyEuId {
	return v.value
}

func (v *NullableCompanyEuId) Set(val *CompanyEuId) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyEuId) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyEuId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyEuId(val *CompanyEuId) *NullableCompanyEuId {
	return &NullableCompanyEuId{value: val, isSet: true}
}

func (v NullableCompanyEuId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyEuId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


