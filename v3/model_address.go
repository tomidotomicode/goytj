/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Address type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Address{}

// Address Osoitetiedot
type Address struct {
	// Osoitteen laji, käyntiosoite: 1, postiosoite: 2. 
	Type int32 `json:"type"`
	// Katuosoite
	Street NullableString `json:"street,omitempty"`
	// Postinumero
	PostCode NullableString `json:"postCode,omitempty"`
	// Postitoimipaikka eri kielillä
	PostOffices []PostOffice `json:"postOffices,omitempty"`
	// Postilokero
	PostOfficeBox NullableString `json:"postOfficeBox,omitempty"`
	// Talo
	BuildingNumber NullableString `json:"buildingNumber,omitempty"`
	// Porras
	Entrance NullableString `json:"entrance,omitempty"`
	// Huoneisto
	ApartmentNumber NullableString `json:"apartmentNumber,omitempty"`
	// Jakokirjain
	ApartmentIdSuffix NullableString `json:"apartmentIdSuffix,omitempty"`
	// Osoitteen c/o-tieto
	Co NullableString `json:"co,omitempty"`
	// Kaksikirjaiminen maakoodi
	Country NullableString `json:"country,omitempty"`
	// Vapaamuotoinen osoite esim. ulkomaalaiselle osoitteelle. Rivinvaihdot korvattu välilyönnillä, välilyönnit korvattu alaviivalla esim Norgårdsvägen_3 _ SE-451_75 Uddevalla
	FreeAddressLine NullableString `json:"freeAddressLine,omitempty"`
	// Rekisteröintipäivämäärä muodossa vvvv-kk-pp
	RegistrationDate NullableString `json:"registrationDate,omitempty"`
	// <a aria-label=\"Tietolähde, avautuu uudessa ikkunassa\" rel=\"noopener\" href=\"/opendata-ytj-api/v3/description?code=TLAHDE&lang=fi\">Tietolähde <svg width=\"15\" height=\"14\" viewBox=\"0 -9 24 24\"> <path margin=\"0\" fill=\"#035ca7\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708\"></path></svg></a> 
	Source string `json:"source"`
}

type _Address Address

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress(type_ int32, source string) *Address {
	this := Address{}
	this.Type = type_
	this.Source = source
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	return &this
}

// GetType returns the Type field value
func (o *Address) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Address) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Address) SetType(v int32) {
	o.Type = v
}

// GetStreet returns the Street field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetStreet() string {
	if o == nil || IsNil(o.Street.Get()) {
		var ret string
		return ret
	}
	return *o.Street.Get()
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetStreetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Street.Get(), o.Street.IsSet()
}

// HasStreet returns a boolean if a field has been set.
func (o *Address) HasStreet() bool {
	if o != nil && o.Street.IsSet() {
		return true
	}

	return false
}

// SetStreet gets a reference to the given NullableString and assigns it to the Street field.
func (o *Address) SetStreet(v string) {
	o.Street.Set(&v)
}
// SetStreetNil sets the value for Street to be an explicit nil
func (o *Address) SetStreetNil() {
	o.Street.Set(nil)
}

// UnsetStreet ensures that no value is present for Street, not even an explicit nil
func (o *Address) UnsetStreet() {
	o.Street.Unset()
}

// GetPostCode returns the PostCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetPostCode() string {
	if o == nil || IsNil(o.PostCode.Get()) {
		var ret string
		return ret
	}
	return *o.PostCode.Get()
}

// GetPostCodeOk returns a tuple with the PostCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetPostCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostCode.Get(), o.PostCode.IsSet()
}

// HasPostCode returns a boolean if a field has been set.
func (o *Address) HasPostCode() bool {
	if o != nil && o.PostCode.IsSet() {
		return true
	}

	return false
}

// SetPostCode gets a reference to the given NullableString and assigns it to the PostCode field.
func (o *Address) SetPostCode(v string) {
	o.PostCode.Set(&v)
}
// SetPostCodeNil sets the value for PostCode to be an explicit nil
func (o *Address) SetPostCodeNil() {
	o.PostCode.Set(nil)
}

// UnsetPostCode ensures that no value is present for PostCode, not even an explicit nil
func (o *Address) UnsetPostCode() {
	o.PostCode.Unset()
}

// GetPostOffices returns the PostOffices field value if set, zero value otherwise.
func (o *Address) GetPostOffices() []PostOffice {
	if o == nil || IsNil(o.PostOffices) {
		var ret []PostOffice
		return ret
	}
	return o.PostOffices
}

// GetPostOfficesOk returns a tuple with the PostOffices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPostOfficesOk() ([]PostOffice, bool) {
	if o == nil || IsNil(o.PostOffices) {
		return nil, false
	}
	return o.PostOffices, true
}

// HasPostOffices returns a boolean if a field has been set.
func (o *Address) HasPostOffices() bool {
	if o != nil && !IsNil(o.PostOffices) {
		return true
	}

	return false
}

// SetPostOffices gets a reference to the given []PostOffice and assigns it to the PostOffices field.
func (o *Address) SetPostOffices(v []PostOffice) {
	o.PostOffices = v
}

// GetPostOfficeBox returns the PostOfficeBox field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetPostOfficeBox() string {
	if o == nil || IsNil(o.PostOfficeBox.Get()) {
		var ret string
		return ret
	}
	return *o.PostOfficeBox.Get()
}

// GetPostOfficeBoxOk returns a tuple with the PostOfficeBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetPostOfficeBoxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostOfficeBox.Get(), o.PostOfficeBox.IsSet()
}

// HasPostOfficeBox returns a boolean if a field has been set.
func (o *Address) HasPostOfficeBox() bool {
	if o != nil && o.PostOfficeBox.IsSet() {
		return true
	}

	return false
}

// SetPostOfficeBox gets a reference to the given NullableString and assigns it to the PostOfficeBox field.
func (o *Address) SetPostOfficeBox(v string) {
	o.PostOfficeBox.Set(&v)
}
// SetPostOfficeBoxNil sets the value for PostOfficeBox to be an explicit nil
func (o *Address) SetPostOfficeBoxNil() {
	o.PostOfficeBox.Set(nil)
}

// UnsetPostOfficeBox ensures that no value is present for PostOfficeBox, not even an explicit nil
func (o *Address) UnsetPostOfficeBox() {
	o.PostOfficeBox.Unset()
}

// GetBuildingNumber returns the BuildingNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetBuildingNumber() string {
	if o == nil || IsNil(o.BuildingNumber.Get()) {
		var ret string
		return ret
	}
	return *o.BuildingNumber.Get()
}

// GetBuildingNumberOk returns a tuple with the BuildingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetBuildingNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildingNumber.Get(), o.BuildingNumber.IsSet()
}

// HasBuildingNumber returns a boolean if a field has been set.
func (o *Address) HasBuildingNumber() bool {
	if o != nil && o.BuildingNumber.IsSet() {
		return true
	}

	return false
}

// SetBuildingNumber gets a reference to the given NullableString and assigns it to the BuildingNumber field.
func (o *Address) SetBuildingNumber(v string) {
	o.BuildingNumber.Set(&v)
}
// SetBuildingNumberNil sets the value for BuildingNumber to be an explicit nil
func (o *Address) SetBuildingNumberNil() {
	o.BuildingNumber.Set(nil)
}

// UnsetBuildingNumber ensures that no value is present for BuildingNumber, not even an explicit nil
func (o *Address) UnsetBuildingNumber() {
	o.BuildingNumber.Unset()
}

// GetEntrance returns the Entrance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetEntrance() string {
	if o == nil || IsNil(o.Entrance.Get()) {
		var ret string
		return ret
	}
	return *o.Entrance.Get()
}

// GetEntranceOk returns a tuple with the Entrance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetEntranceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entrance.Get(), o.Entrance.IsSet()
}

// HasEntrance returns a boolean if a field has been set.
func (o *Address) HasEntrance() bool {
	if o != nil && o.Entrance.IsSet() {
		return true
	}

	return false
}

// SetEntrance gets a reference to the given NullableString and assigns it to the Entrance field.
func (o *Address) SetEntrance(v string) {
	o.Entrance.Set(&v)
}
// SetEntranceNil sets the value for Entrance to be an explicit nil
func (o *Address) SetEntranceNil() {
	o.Entrance.Set(nil)
}

// UnsetEntrance ensures that no value is present for Entrance, not even an explicit nil
func (o *Address) UnsetEntrance() {
	o.Entrance.Unset()
}

// GetApartmentNumber returns the ApartmentNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetApartmentNumber() string {
	if o == nil || IsNil(o.ApartmentNumber.Get()) {
		var ret string
		return ret
	}
	return *o.ApartmentNumber.Get()
}

// GetApartmentNumberOk returns a tuple with the ApartmentNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetApartmentNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApartmentNumber.Get(), o.ApartmentNumber.IsSet()
}

// HasApartmentNumber returns a boolean if a field has been set.
func (o *Address) HasApartmentNumber() bool {
	if o != nil && o.ApartmentNumber.IsSet() {
		return true
	}

	return false
}

// SetApartmentNumber gets a reference to the given NullableString and assigns it to the ApartmentNumber field.
func (o *Address) SetApartmentNumber(v string) {
	o.ApartmentNumber.Set(&v)
}
// SetApartmentNumberNil sets the value for ApartmentNumber to be an explicit nil
func (o *Address) SetApartmentNumberNil() {
	o.ApartmentNumber.Set(nil)
}

// UnsetApartmentNumber ensures that no value is present for ApartmentNumber, not even an explicit nil
func (o *Address) UnsetApartmentNumber() {
	o.ApartmentNumber.Unset()
}

// GetApartmentIdSuffix returns the ApartmentIdSuffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetApartmentIdSuffix() string {
	if o == nil || IsNil(o.ApartmentIdSuffix.Get()) {
		var ret string
		return ret
	}
	return *o.ApartmentIdSuffix.Get()
}

// GetApartmentIdSuffixOk returns a tuple with the ApartmentIdSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetApartmentIdSuffixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApartmentIdSuffix.Get(), o.ApartmentIdSuffix.IsSet()
}

// HasApartmentIdSuffix returns a boolean if a field has been set.
func (o *Address) HasApartmentIdSuffix() bool {
	if o != nil && o.ApartmentIdSuffix.IsSet() {
		return true
	}

	return false
}

// SetApartmentIdSuffix gets a reference to the given NullableString and assigns it to the ApartmentIdSuffix field.
func (o *Address) SetApartmentIdSuffix(v string) {
	o.ApartmentIdSuffix.Set(&v)
}
// SetApartmentIdSuffixNil sets the value for ApartmentIdSuffix to be an explicit nil
func (o *Address) SetApartmentIdSuffixNil() {
	o.ApartmentIdSuffix.Set(nil)
}

// UnsetApartmentIdSuffix ensures that no value is present for ApartmentIdSuffix, not even an explicit nil
func (o *Address) UnsetApartmentIdSuffix() {
	o.ApartmentIdSuffix.Unset()
}

// GetCo returns the Co field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetCo() string {
	if o == nil || IsNil(o.Co.Get()) {
		var ret string
		return ret
	}
	return *o.Co.Get()
}

// GetCoOk returns a tuple with the Co field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetCoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Co.Get(), o.Co.IsSet()
}

// HasCo returns a boolean if a field has been set.
func (o *Address) HasCo() bool {
	if o != nil && o.Co.IsSet() {
		return true
	}

	return false
}

// SetCo gets a reference to the given NullableString and assigns it to the Co field.
func (o *Address) SetCo(v string) {
	o.Co.Set(&v)
}
// SetCoNil sets the value for Co to be an explicit nil
func (o *Address) SetCoNil() {
	o.Co.Set(nil)
}

// UnsetCo ensures that no value is present for Co, not even an explicit nil
func (o *Address) UnsetCo() {
	o.Co.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetCountry() string {
	if o == nil || IsNil(o.Country.Get()) {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *Address) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *Address) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *Address) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *Address) UnsetCountry() {
	o.Country.Unset()
}

// GetFreeAddressLine returns the FreeAddressLine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetFreeAddressLine() string {
	if o == nil || IsNil(o.FreeAddressLine.Get()) {
		var ret string
		return ret
	}
	return *o.FreeAddressLine.Get()
}

// GetFreeAddressLineOk returns a tuple with the FreeAddressLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetFreeAddressLineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreeAddressLine.Get(), o.FreeAddressLine.IsSet()
}

// HasFreeAddressLine returns a boolean if a field has been set.
func (o *Address) HasFreeAddressLine() bool {
	if o != nil && o.FreeAddressLine.IsSet() {
		return true
	}

	return false
}

// SetFreeAddressLine gets a reference to the given NullableString and assigns it to the FreeAddressLine field.
func (o *Address) SetFreeAddressLine(v string) {
	o.FreeAddressLine.Set(&v)
}
// SetFreeAddressLineNil sets the value for FreeAddressLine to be an explicit nil
func (o *Address) SetFreeAddressLineNil() {
	o.FreeAddressLine.Set(nil)
}

// UnsetFreeAddressLine ensures that no value is present for FreeAddressLine, not even an explicit nil
func (o *Address) UnsetFreeAddressLine() {
	o.FreeAddressLine.Unset()
}

// GetRegistrationDate returns the RegistrationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Address) GetRegistrationDate() string {
	if o == nil || IsNil(o.RegistrationDate.Get()) {
		var ret string
		return ret
	}
	return *o.RegistrationDate.Get()
}

// GetRegistrationDateOk returns a tuple with the RegistrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetRegistrationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationDate.Get(), o.RegistrationDate.IsSet()
}

// HasRegistrationDate returns a boolean if a field has been set.
func (o *Address) HasRegistrationDate() bool {
	if o != nil && o.RegistrationDate.IsSet() {
		return true
	}

	return false
}

// SetRegistrationDate gets a reference to the given NullableString and assigns it to the RegistrationDate field.
func (o *Address) SetRegistrationDate(v string) {
	o.RegistrationDate.Set(&v)
}
// SetRegistrationDateNil sets the value for RegistrationDate to be an explicit nil
func (o *Address) SetRegistrationDateNil() {
	o.RegistrationDate.Set(nil)
}

// UnsetRegistrationDate ensures that no value is present for RegistrationDate, not even an explicit nil
func (o *Address) UnsetRegistrationDate() {
	o.RegistrationDate.Unset()
}

// GetSource returns the Source field value
func (o *Address) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Address) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *Address) SetSource(v string) {
	o.Source = v
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Address) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if o.Street.IsSet() {
		toSerialize["street"] = o.Street.Get()
	}
	if o.PostCode.IsSet() {
		toSerialize["postCode"] = o.PostCode.Get()
	}
	if !IsNil(o.PostOffices) {
		toSerialize["postOffices"] = o.PostOffices
	}
	if o.PostOfficeBox.IsSet() {
		toSerialize["postOfficeBox"] = o.PostOfficeBox.Get()
	}
	if o.BuildingNumber.IsSet() {
		toSerialize["buildingNumber"] = o.BuildingNumber.Get()
	}
	if o.Entrance.IsSet() {
		toSerialize["entrance"] = o.Entrance.Get()
	}
	if o.ApartmentNumber.IsSet() {
		toSerialize["apartmentNumber"] = o.ApartmentNumber.Get()
	}
	if o.ApartmentIdSuffix.IsSet() {
		toSerialize["apartmentIdSuffix"] = o.ApartmentIdSuffix.Get()
	}
	if o.Co.IsSet() {
		toSerialize["co"] = o.Co.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.FreeAddressLine.IsSet() {
		toSerialize["freeAddressLine"] = o.FreeAddressLine.Get()
	}
	if o.RegistrationDate.IsSet() {
		toSerialize["registrationDate"] = o.RegistrationDate.Get()
	}
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *Address) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddress := _Address{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddress)

	if err != nil {
		return err
	}

	*o = Address(varAddress)

	return err
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


