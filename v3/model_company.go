/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Company type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Company{}

// Company Yrityksen tai yhteisön tiedot
type Company struct {
	BusinessId CompanyBusinessId `json:"businessId"`
	EuId *CompanyEuId `json:"euId,omitempty"`
	// Yrityksen nimet; päätoiminimi, rinnakkaistoiminimet ja aputoiminimet
	Names []RegisterName `json:"names,omitempty"`
	MainBusinessLine *CompanyMainBusinessLine `json:"mainBusinessLine,omitempty"`
	Website *CompanyWebsite `json:"website,omitempty"`
	// Yritysmuoto ja edellinen tieto, jos se on olemassa
	CompanyForms []CompanyForm `json:"companyForms,omitempty"`
	// Yrityksen tilanne (mahdollinen saneeraus, selvitystila tai konkurssi)
	CompanySituations []CompanySituation `json:"companySituations,omitempty"`
	// Yrityksen rekisterimerkinnät
	RegisteredEntries []RegisteredEntry `json:"registeredEntries"`
	// Yrityksen käynti- tai postiosoite
	Addresses []Address `json:"addresses,omitempty"`
	// [Yrityksen kaupparekisterin tilatieto](/opendata-ytj-api/v3/description?code=REK_KDI&lang=fi) 
	TradeRegisterStatus string `json:"tradeRegisterStatus"`
	// [Yrityksen y-tunnuksen tila](/opendata-ytj-api/v3/description?code=STATUS3&lang=fi) 
	Status *string `json:"status,omitempty"`
	// Yrityksen rekisteröintipäivämäärä muodossa vvvv-kk-pp
	RegistrationDate NullableString `json:"registrationDate,omitempty"`
	// Lakkaamispäivä  muodossa vvvv-kk-pp
	EndDate NullableString `json:"endDate,omitempty"`
	// Viimeksi muokattu sekuntitasolla ilman aikavyöhykettä muodossa 'vvvv-kk-pp 00:00:00'
	LastModified string `json:"lastModified"`
}

type _Company Company

// NewCompany instantiates a new Company object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompany(businessId CompanyBusinessId, registeredEntries []RegisteredEntry, tradeRegisterStatus string, lastModified string) *Company {
	this := Company{}
	this.BusinessId = businessId
	this.RegisteredEntries = registeredEntries
	this.TradeRegisterStatus = tradeRegisterStatus
	this.LastModified = lastModified
	return &this
}

// NewCompanyWithDefaults instantiates a new Company object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyWithDefaults() *Company {
	this := Company{}
	return &this
}

// GetBusinessId returns the BusinessId field value
func (o *Company) GetBusinessId() CompanyBusinessId {
	if o == nil {
		var ret CompanyBusinessId
		return ret
	}

	return o.BusinessId
}

// GetBusinessIdOk returns a tuple with the BusinessId field value
// and a boolean to check if the value has been set.
func (o *Company) GetBusinessIdOk() (*CompanyBusinessId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BusinessId, true
}

// SetBusinessId sets field value
func (o *Company) SetBusinessId(v CompanyBusinessId) {
	o.BusinessId = v
}

// GetEuId returns the EuId field value if set, zero value otherwise.
func (o *Company) GetEuId() CompanyEuId {
	if o == nil || IsNil(o.EuId) {
		var ret CompanyEuId
		return ret
	}
	return *o.EuId
}

// GetEuIdOk returns a tuple with the EuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetEuIdOk() (*CompanyEuId, bool) {
	if o == nil || IsNil(o.EuId) {
		return nil, false
	}
	return o.EuId, true
}

// HasEuId returns a boolean if a field has been set.
func (o *Company) HasEuId() bool {
	if o != nil && !IsNil(o.EuId) {
		return true
	}

	return false
}

// SetEuId gets a reference to the given CompanyEuId and assigns it to the EuId field.
func (o *Company) SetEuId(v CompanyEuId) {
	o.EuId = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *Company) GetNames() []RegisterName {
	if o == nil || IsNil(o.Names) {
		var ret []RegisterName
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetNamesOk() ([]RegisterName, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Company) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []RegisterName and assigns it to the Names field.
func (o *Company) SetNames(v []RegisterName) {
	o.Names = v
}

// GetMainBusinessLine returns the MainBusinessLine field value if set, zero value otherwise.
func (o *Company) GetMainBusinessLine() CompanyMainBusinessLine {
	if o == nil || IsNil(o.MainBusinessLine) {
		var ret CompanyMainBusinessLine
		return ret
	}
	return *o.MainBusinessLine
}

// GetMainBusinessLineOk returns a tuple with the MainBusinessLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetMainBusinessLineOk() (*CompanyMainBusinessLine, bool) {
	if o == nil || IsNil(o.MainBusinessLine) {
		return nil, false
	}
	return o.MainBusinessLine, true
}

// HasMainBusinessLine returns a boolean if a field has been set.
func (o *Company) HasMainBusinessLine() bool {
	if o != nil && !IsNil(o.MainBusinessLine) {
		return true
	}

	return false
}

// SetMainBusinessLine gets a reference to the given CompanyMainBusinessLine and assigns it to the MainBusinessLine field.
func (o *Company) SetMainBusinessLine(v CompanyMainBusinessLine) {
	o.MainBusinessLine = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *Company) GetWebsite() CompanyWebsite {
	if o == nil || IsNil(o.Website) {
		var ret CompanyWebsite
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetWebsiteOk() (*CompanyWebsite, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *Company) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given CompanyWebsite and assigns it to the Website field.
func (o *Company) SetWebsite(v CompanyWebsite) {
	o.Website = &v
}

// GetCompanyForms returns the CompanyForms field value if set, zero value otherwise.
func (o *Company) GetCompanyForms() []CompanyForm {
	if o == nil || IsNil(o.CompanyForms) {
		var ret []CompanyForm
		return ret
	}
	return o.CompanyForms
}

// GetCompanyFormsOk returns a tuple with the CompanyForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetCompanyFormsOk() ([]CompanyForm, bool) {
	if o == nil || IsNil(o.CompanyForms) {
		return nil, false
	}
	return o.CompanyForms, true
}

// HasCompanyForms returns a boolean if a field has been set.
func (o *Company) HasCompanyForms() bool {
	if o != nil && !IsNil(o.CompanyForms) {
		return true
	}

	return false
}

// SetCompanyForms gets a reference to the given []CompanyForm and assigns it to the CompanyForms field.
func (o *Company) SetCompanyForms(v []CompanyForm) {
	o.CompanyForms = v
}

// GetCompanySituations returns the CompanySituations field value if set, zero value otherwise.
func (o *Company) GetCompanySituations() []CompanySituation {
	if o == nil || IsNil(o.CompanySituations) {
		var ret []CompanySituation
		return ret
	}
	return o.CompanySituations
}

// GetCompanySituationsOk returns a tuple with the CompanySituations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetCompanySituationsOk() ([]CompanySituation, bool) {
	if o == nil || IsNil(o.CompanySituations) {
		return nil, false
	}
	return o.CompanySituations, true
}

// HasCompanySituations returns a boolean if a field has been set.
func (o *Company) HasCompanySituations() bool {
	if o != nil && !IsNil(o.CompanySituations) {
		return true
	}

	return false
}

// SetCompanySituations gets a reference to the given []CompanySituation and assigns it to the CompanySituations field.
func (o *Company) SetCompanySituations(v []CompanySituation) {
	o.CompanySituations = v
}

// GetRegisteredEntries returns the RegisteredEntries field value
func (o *Company) GetRegisteredEntries() []RegisteredEntry {
	if o == nil {
		var ret []RegisteredEntry
		return ret
	}

	return o.RegisteredEntries
}

// GetRegisteredEntriesOk returns a tuple with the RegisteredEntries field value
// and a boolean to check if the value has been set.
func (o *Company) GetRegisteredEntriesOk() ([]RegisteredEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredEntries, true
}

// SetRegisteredEntries sets field value
func (o *Company) SetRegisteredEntries(v []RegisteredEntry) {
	o.RegisteredEntries = v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *Company) GetAddresses() []Address {
	if o == nil || IsNil(o.Addresses) {
		var ret []Address
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetAddressesOk() ([]Address, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *Company) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []Address and assigns it to the Addresses field.
func (o *Company) SetAddresses(v []Address) {
	o.Addresses = v
}

// GetTradeRegisterStatus returns the TradeRegisterStatus field value
func (o *Company) GetTradeRegisterStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TradeRegisterStatus
}

// GetTradeRegisterStatusOk returns a tuple with the TradeRegisterStatus field value
// and a boolean to check if the value has been set.
func (o *Company) GetTradeRegisterStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeRegisterStatus, true
}

// SetTradeRegisterStatus sets field value
func (o *Company) SetTradeRegisterStatus(v string) {
	o.TradeRegisterStatus = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Company) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Company) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Company) SetStatus(v string) {
	o.Status = &v
}

// GetRegistrationDate returns the RegistrationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Company) GetRegistrationDate() string {
	if o == nil || IsNil(o.RegistrationDate.Get()) {
		var ret string
		return ret
	}
	return *o.RegistrationDate.Get()
}

// GetRegistrationDateOk returns a tuple with the RegistrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Company) GetRegistrationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationDate.Get(), o.RegistrationDate.IsSet()
}

// HasRegistrationDate returns a boolean if a field has been set.
func (o *Company) HasRegistrationDate() bool {
	if o != nil && o.RegistrationDate.IsSet() {
		return true
	}

	return false
}

// SetRegistrationDate gets a reference to the given NullableString and assigns it to the RegistrationDate field.
func (o *Company) SetRegistrationDate(v string) {
	o.RegistrationDate.Set(&v)
}
// SetRegistrationDateNil sets the value for RegistrationDate to be an explicit nil
func (o *Company) SetRegistrationDateNil() {
	o.RegistrationDate.Set(nil)
}

// UnsetRegistrationDate ensures that no value is present for RegistrationDate, not even an explicit nil
func (o *Company) UnsetRegistrationDate() {
	o.RegistrationDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Company) GetEndDate() string {
	if o == nil || IsNil(o.EndDate.Get()) {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Company) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *Company) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *Company) SetEndDate(v string) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *Company) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *Company) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetLastModified returns the LastModified field value
func (o *Company) GetLastModified() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *Company) GetLastModifiedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *Company) SetLastModified(v string) {
	o.LastModified = v
}

func (o Company) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Company) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["businessId"] = o.BusinessId
	if !IsNil(o.EuId) {
		toSerialize["euId"] = o.EuId
	}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.MainBusinessLine) {
		toSerialize["mainBusinessLine"] = o.MainBusinessLine
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	if !IsNil(o.CompanyForms) {
		toSerialize["companyForms"] = o.CompanyForms
	}
	if !IsNil(o.CompanySituations) {
		toSerialize["companySituations"] = o.CompanySituations
	}
	toSerialize["registeredEntries"] = o.RegisteredEntries
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	toSerialize["tradeRegisterStatus"] = o.TradeRegisterStatus
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.RegistrationDate.IsSet() {
		toSerialize["registrationDate"] = o.RegistrationDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	toSerialize["lastModified"] = o.LastModified
	return toSerialize, nil
}

func (o *Company) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"businessId",
		"registeredEntries",
		"tradeRegisterStatus",
		"lastModified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompany := _Company{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompany)

	if err != nil {
		return err
	}

	*o = Company(varCompany)

	return err
}

type NullableCompany struct {
	value *Company
	isSet bool
}

func (v NullableCompany) Get() *Company {
	return v.value
}

func (v *NullableCompany) Set(val *Company) {
	v.value = val
	v.isSet = true
}

func (v NullableCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompany(val *Company) *NullableCompany {
	return &NullableCompany{value: val, isSet: true}
}

func (v NullableCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


