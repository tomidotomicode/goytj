/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostOfficeEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostOfficeEntry{}

// PostOfficeEntry Postiosoitteet
type PostOfficeEntry struct {
	// Postinumero
	PostCode string `json:"postCode"`
	// Postitoimipaikka
	City string `json:"city"`
	// Onko tieto aktiivinen
	Active bool `json:"active"`
	// [Kielikoodi](/opendata-ytj-api/v3/description?code=KIELI&lang=fi) 
	LanguageCode string `json:"languageCode"`
	// Kuntakoodi
	MunicipalityCode NullableString `json:"municipalityCode,omitempty"`
}

type _PostOfficeEntry PostOfficeEntry

// NewPostOfficeEntry instantiates a new PostOfficeEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostOfficeEntry(postCode string, city string, active bool, languageCode string) *PostOfficeEntry {
	this := PostOfficeEntry{}
	this.PostCode = postCode
	this.City = city
	this.Active = active
	this.LanguageCode = languageCode
	return &this
}

// NewPostOfficeEntryWithDefaults instantiates a new PostOfficeEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostOfficeEntryWithDefaults() *PostOfficeEntry {
	this := PostOfficeEntry{}
	return &this
}

// GetPostCode returns the PostCode field value
func (o *PostOfficeEntry) GetPostCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostCode
}

// GetPostCodeOk returns a tuple with the PostCode field value
// and a boolean to check if the value has been set.
func (o *PostOfficeEntry) GetPostCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostCode, true
}

// SetPostCode sets field value
func (o *PostOfficeEntry) SetPostCode(v string) {
	o.PostCode = v
}

// GetCity returns the City field value
func (o *PostOfficeEntry) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *PostOfficeEntry) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *PostOfficeEntry) SetCity(v string) {
	o.City = v
}

// GetActive returns the Active field value
func (o *PostOfficeEntry) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *PostOfficeEntry) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *PostOfficeEntry) SetActive(v bool) {
	o.Active = v
}

// GetLanguageCode returns the LanguageCode field value
func (o *PostOfficeEntry) GetLanguageCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value
// and a boolean to check if the value has been set.
func (o *PostOfficeEntry) GetLanguageCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LanguageCode, true
}

// SetLanguageCode sets field value
func (o *PostOfficeEntry) SetLanguageCode(v string) {
	o.LanguageCode = v
}

// GetMunicipalityCode returns the MunicipalityCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostOfficeEntry) GetMunicipalityCode() string {
	if o == nil || IsNil(o.MunicipalityCode.Get()) {
		var ret string
		return ret
	}
	return *o.MunicipalityCode.Get()
}

// GetMunicipalityCodeOk returns a tuple with the MunicipalityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostOfficeEntry) GetMunicipalityCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MunicipalityCode.Get(), o.MunicipalityCode.IsSet()
}

// HasMunicipalityCode returns a boolean if a field has been set.
func (o *PostOfficeEntry) HasMunicipalityCode() bool {
	if o != nil && o.MunicipalityCode.IsSet() {
		return true
	}

	return false
}

// SetMunicipalityCode gets a reference to the given NullableString and assigns it to the MunicipalityCode field.
func (o *PostOfficeEntry) SetMunicipalityCode(v string) {
	o.MunicipalityCode.Set(&v)
}
// SetMunicipalityCodeNil sets the value for MunicipalityCode to be an explicit nil
func (o *PostOfficeEntry) SetMunicipalityCodeNil() {
	o.MunicipalityCode.Set(nil)
}

// UnsetMunicipalityCode ensures that no value is present for MunicipalityCode, not even an explicit nil
func (o *PostOfficeEntry) UnsetMunicipalityCode() {
	o.MunicipalityCode.Unset()
}

func (o PostOfficeEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostOfficeEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["postCode"] = o.PostCode
	toSerialize["city"] = o.City
	toSerialize["active"] = o.Active
	toSerialize["languageCode"] = o.LanguageCode
	if o.MunicipalityCode.IsSet() {
		toSerialize["municipalityCode"] = o.MunicipalityCode.Get()
	}
	return toSerialize, nil
}

func (o *PostOfficeEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"postCode",
		"city",
		"active",
		"languageCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostOfficeEntry := _PostOfficeEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostOfficeEntry)

	if err != nil {
		return err
	}

	*o = PostOfficeEntry(varPostOfficeEntry)

	return err
}

type NullablePostOfficeEntry struct {
	value *PostOfficeEntry
	isSet bool
}

func (v NullablePostOfficeEntry) Get() *PostOfficeEntry {
	return v.value
}

func (v *NullablePostOfficeEntry) Set(val *PostOfficeEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePostOfficeEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePostOfficeEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostOfficeEntry(val *PostOfficeEntry) *NullablePostOfficeEntry {
	return &NullablePostOfficeEntry{value: val, isSet: true}
}

func (v NullablePostOfficeEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostOfficeEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


