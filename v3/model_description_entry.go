/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DescriptionEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescriptionEntry{}

// DescriptionEntry Tiedon kuvaus
type DescriptionEntry struct {
	// Kielikoodi, 1 - Suomi, 2 - Ruotsi, 3 - Englanti
	LanguageCode string `json:"languageCode"`
	// Koodiseloste
	Description NullableString `json:"description,omitempty"`
}

type _DescriptionEntry DescriptionEntry

// NewDescriptionEntry instantiates a new DescriptionEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescriptionEntry(languageCode string) *DescriptionEntry {
	this := DescriptionEntry{}
	this.LanguageCode = languageCode
	return &this
}

// NewDescriptionEntryWithDefaults instantiates a new DescriptionEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptionEntryWithDefaults() *DescriptionEntry {
	this := DescriptionEntry{}
	return &this
}

// GetLanguageCode returns the LanguageCode field value
func (o *DescriptionEntry) GetLanguageCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value
// and a boolean to check if the value has been set.
func (o *DescriptionEntry) GetLanguageCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LanguageCode, true
}

// SetLanguageCode sets field value
func (o *DescriptionEntry) SetLanguageCode(v string) {
	o.LanguageCode = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DescriptionEntry) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DescriptionEntry) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DescriptionEntry) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DescriptionEntry) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DescriptionEntry) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DescriptionEntry) UnsetDescription() {
	o.Description.Unset()
}

func (o DescriptionEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescriptionEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["languageCode"] = o.LanguageCode
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return toSerialize, nil
}

func (o *DescriptionEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"languageCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescriptionEntry := _DescriptionEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescriptionEntry)

	if err != nil {
		return err
	}

	*o = DescriptionEntry(varDescriptionEntry)

	return err
}

type NullableDescriptionEntry struct {
	value *DescriptionEntry
	isSet bool
}

func (v NullableDescriptionEntry) Get() *DescriptionEntry {
	return v.value
}

func (v *NullableDescriptionEntry) Set(val *DescriptionEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableDescriptionEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableDescriptionEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescriptionEntry(val *DescriptionEntry) *NullableDescriptionEntry {
	return &NullableDescriptionEntry{value: val, isSet: true}
}

func (v NullableDescriptionEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescriptionEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


