/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyMainBusinessLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyMainBusinessLine{}

// CompanyMainBusinessLine Päätoimiala
type CompanyMainBusinessLine struct {
	// Toimialakoodi
	Type string `json:"type"`
	// Toimialan kuvaukset
	Descriptions []DescriptionEntry `json:"descriptions,omitempty"`
	// Toimialaluokituksen koodistot TOIMI, TOIMI2, TOIMI3
	TypeCodeSet *string `json:"typeCodeSet,omitempty"`
	// Toimialakoodin alkupäivämäärä muodossa vvvv-kk-pp
	RegistrationDate NullableString `json:"registrationDate,omitempty"`
	// <a aria-label=\"Tietolähde, avautuu uudessa ikkunassa\" rel=\"noopener\" href=\"/opendata-ytj-api/v3/description?code=TLAHDE&lang=fi\">Tietolähde <svg width=\"15\" height=\"14\" viewBox=\"0 -9 24 24\"> <path margin=\"0\" fill=\"#035ca7\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708\"></path></svg></a> 
	Source string `json:"source"`
}

type _CompanyMainBusinessLine CompanyMainBusinessLine

// NewCompanyMainBusinessLine instantiates a new CompanyMainBusinessLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyMainBusinessLine(type_ string, source string) *CompanyMainBusinessLine {
	this := CompanyMainBusinessLine{}
	this.Type = type_
	this.Source = source
	return &this
}

// NewCompanyMainBusinessLineWithDefaults instantiates a new CompanyMainBusinessLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyMainBusinessLineWithDefaults() *CompanyMainBusinessLine {
	this := CompanyMainBusinessLine{}
	return &this
}

// GetType returns the Type field value
func (o *CompanyMainBusinessLine) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CompanyMainBusinessLine) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CompanyMainBusinessLine) SetType(v string) {
	o.Type = v
}

// GetDescriptions returns the Descriptions field value if set, zero value otherwise.
func (o *CompanyMainBusinessLine) GetDescriptions() []DescriptionEntry {
	if o == nil || IsNil(o.Descriptions) {
		var ret []DescriptionEntry
		return ret
	}
	return o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyMainBusinessLine) GetDescriptionsOk() ([]DescriptionEntry, bool) {
	if o == nil || IsNil(o.Descriptions) {
		return nil, false
	}
	return o.Descriptions, true
}

// HasDescriptions returns a boolean if a field has been set.
func (o *CompanyMainBusinessLine) HasDescriptions() bool {
	if o != nil && !IsNil(o.Descriptions) {
		return true
	}

	return false
}

// SetDescriptions gets a reference to the given []DescriptionEntry and assigns it to the Descriptions field.
func (o *CompanyMainBusinessLine) SetDescriptions(v []DescriptionEntry) {
	o.Descriptions = v
}

// GetTypeCodeSet returns the TypeCodeSet field value if set, zero value otherwise.
func (o *CompanyMainBusinessLine) GetTypeCodeSet() string {
	if o == nil || IsNil(o.TypeCodeSet) {
		var ret string
		return ret
	}
	return *o.TypeCodeSet
}

// GetTypeCodeSetOk returns a tuple with the TypeCodeSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyMainBusinessLine) GetTypeCodeSetOk() (*string, bool) {
	if o == nil || IsNil(o.TypeCodeSet) {
		return nil, false
	}
	return o.TypeCodeSet, true
}

// HasTypeCodeSet returns a boolean if a field has been set.
func (o *CompanyMainBusinessLine) HasTypeCodeSet() bool {
	if o != nil && !IsNil(o.TypeCodeSet) {
		return true
	}

	return false
}

// SetTypeCodeSet gets a reference to the given string and assigns it to the TypeCodeSet field.
func (o *CompanyMainBusinessLine) SetTypeCodeSet(v string) {
	o.TypeCodeSet = &v
}

// GetRegistrationDate returns the RegistrationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyMainBusinessLine) GetRegistrationDate() string {
	if o == nil || IsNil(o.RegistrationDate.Get()) {
		var ret string
		return ret
	}
	return *o.RegistrationDate.Get()
}

// GetRegistrationDateOk returns a tuple with the RegistrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyMainBusinessLine) GetRegistrationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationDate.Get(), o.RegistrationDate.IsSet()
}

// HasRegistrationDate returns a boolean if a field has been set.
func (o *CompanyMainBusinessLine) HasRegistrationDate() bool {
	if o != nil && o.RegistrationDate.IsSet() {
		return true
	}

	return false
}

// SetRegistrationDate gets a reference to the given NullableString and assigns it to the RegistrationDate field.
func (o *CompanyMainBusinessLine) SetRegistrationDate(v string) {
	o.RegistrationDate.Set(&v)
}
// SetRegistrationDateNil sets the value for RegistrationDate to be an explicit nil
func (o *CompanyMainBusinessLine) SetRegistrationDateNil() {
	o.RegistrationDate.Set(nil)
}

// UnsetRegistrationDate ensures that no value is present for RegistrationDate, not even an explicit nil
func (o *CompanyMainBusinessLine) UnsetRegistrationDate() {
	o.RegistrationDate.Unset()
}

// GetSource returns the Source field value
func (o *CompanyMainBusinessLine) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CompanyMainBusinessLine) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *CompanyMainBusinessLine) SetSource(v string) {
	o.Source = v
}

func (o CompanyMainBusinessLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyMainBusinessLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Descriptions) {
		toSerialize["descriptions"] = o.Descriptions
	}
	if !IsNil(o.TypeCodeSet) {
		toSerialize["typeCodeSet"] = o.TypeCodeSet
	}
	if o.RegistrationDate.IsSet() {
		toSerialize["registrationDate"] = o.RegistrationDate.Get()
	}
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *CompanyMainBusinessLine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyMainBusinessLine := _CompanyMainBusinessLine{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyMainBusinessLine)

	if err != nil {
		return err
	}

	*o = CompanyMainBusinessLine(varCompanyMainBusinessLine)

	return err
}

type NullableCompanyMainBusinessLine struct {
	value *CompanyMainBusinessLine
	isSet bool
}

func (v NullableCompanyMainBusinessLine) Get() *CompanyMainBusinessLine {
	return v.value
}

func (v *NullableCompanyMainBusinessLine) Set(val *CompanyMainBusinessLine) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyMainBusinessLine) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyMainBusinessLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyMainBusinessLine(val *CompanyMainBusinessLine) *NullableCompanyMainBusinessLine {
	return &NullableCompanyMainBusinessLine{value: val, isSet: true}
}

func (v NullableCompanyMainBusinessLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyMainBusinessLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


