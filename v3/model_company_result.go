/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyResult{}

// CompanyResult Yrityksen tai yhteisön tulokset
type CompanyResult struct {
	// Kokonaistulosten määrä
	TotalResults int64 `json:"totalResults"`
	// Yrityksen tai yhteisön tiedot
	Companies []Company `json:"companies"`
}

type _CompanyResult CompanyResult

// NewCompanyResult instantiates a new CompanyResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyResult(totalResults int64, companies []Company) *CompanyResult {
	this := CompanyResult{}
	this.TotalResults = totalResults
	this.Companies = companies
	return &this
}

// NewCompanyResultWithDefaults instantiates a new CompanyResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyResultWithDefaults() *CompanyResult {
	this := CompanyResult{}
	return &this
}

// GetTotalResults returns the TotalResults field value
func (o *CompanyResult) GetTotalResults() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value
// and a boolean to check if the value has been set.
func (o *CompanyResult) GetTotalResultsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalResults, true
}

// SetTotalResults sets field value
func (o *CompanyResult) SetTotalResults(v int64) {
	o.TotalResults = v
}

// GetCompanies returns the Companies field value
func (o *CompanyResult) GetCompanies() []Company {
	if o == nil {
		var ret []Company
		return ret
	}

	return o.Companies
}

// GetCompaniesOk returns a tuple with the Companies field value
// and a boolean to check if the value has been set.
func (o *CompanyResult) GetCompaniesOk() ([]Company, bool) {
	if o == nil {
		return nil, false
	}
	return o.Companies, true
}

// SetCompanies sets field value
func (o *CompanyResult) SetCompanies(v []Company) {
	o.Companies = v
}

func (o CompanyResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalResults"] = o.TotalResults
	toSerialize["companies"] = o.Companies
	return toSerialize, nil
}

func (o *CompanyResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalResults",
		"companies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyResult := _CompanyResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyResult)

	if err != nil {
		return err
	}

	*o = CompanyResult(varCompanyResult)

	return err
}

type NullableCompanyResult struct {
	value *CompanyResult
	isSet bool
}

func (v NullableCompanyResult) Get() *CompanyResult {
	return v.value
}

func (v *NullableCompanyResult) Set(val *CompanyResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyResult(val *CompanyResult) *NullableCompanyResult {
	return &NullableCompanyResult{value: val, isSet: true}
}

func (v NullableCompanyResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


