/*
Opendata YTJ-Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ytjclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisteredEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisteredEntry{}

// RegisteredEntry Rekisterimerkinnät
type RegisteredEntry struct {
	// [Yrityksen rekisteröintitilan koodi](/opendata-ytj-api/v3/description?code=REK_KDI&lang=fi). Tulkittava Koodistosta REK_KDI yhdistämällä rekisterimerkinnän koodi rekisterikoodiin erotettuna alaviivalla, esim '1_0' on rekisteröimätön kaupparekisterissä 
	Type string `json:"type"`
	// Rekisteröintitilan kuvaukset
	Descriptions []DescriptionEntry `json:"descriptions,omitempty"`
	// Rekisteröintipäivämäärä muodossa vvvv-kk-pp
	RegistrationDate NullableString `json:"registrationDate,omitempty"`
	// Rekisteröinnin loppupäivämäärä muodossa vvvv-kk-pp
	EndDate NullableString `json:"endDate,omitempty"`
	// [Rekisterin koodi](/opendata-ytj-api/v3/description?code=REK&lang=fi) 
	Register string `json:"register"`
	// [Viranomaisen koodi](/opendata-ytj-api/v3/description?code=VIRANOM&lang=fi) 
	Authority string `json:"authority"`
}

type _RegisteredEntry RegisteredEntry

// NewRegisteredEntry instantiates a new RegisteredEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredEntry(type_ string, register string, authority string) *RegisteredEntry {
	this := RegisteredEntry{}
	this.Type = type_
	this.Register = register
	this.Authority = authority
	return &this
}

// NewRegisteredEntryWithDefaults instantiates a new RegisteredEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredEntryWithDefaults() *RegisteredEntry {
	this := RegisteredEntry{}
	return &this
}

// GetType returns the Type field value
func (o *RegisteredEntry) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RegisteredEntry) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RegisteredEntry) SetType(v string) {
	o.Type = v
}

// GetDescriptions returns the Descriptions field value if set, zero value otherwise.
func (o *RegisteredEntry) GetDescriptions() []DescriptionEntry {
	if o == nil || IsNil(o.Descriptions) {
		var ret []DescriptionEntry
		return ret
	}
	return o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEntry) GetDescriptionsOk() ([]DescriptionEntry, bool) {
	if o == nil || IsNil(o.Descriptions) {
		return nil, false
	}
	return o.Descriptions, true
}

// HasDescriptions returns a boolean if a field has been set.
func (o *RegisteredEntry) HasDescriptions() bool {
	if o != nil && !IsNil(o.Descriptions) {
		return true
	}

	return false
}

// SetDescriptions gets a reference to the given []DescriptionEntry and assigns it to the Descriptions field.
func (o *RegisteredEntry) SetDescriptions(v []DescriptionEntry) {
	o.Descriptions = v
}

// GetRegistrationDate returns the RegistrationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEntry) GetRegistrationDate() string {
	if o == nil || IsNil(o.RegistrationDate.Get()) {
		var ret string
		return ret
	}
	return *o.RegistrationDate.Get()
}

// GetRegistrationDateOk returns a tuple with the RegistrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEntry) GetRegistrationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationDate.Get(), o.RegistrationDate.IsSet()
}

// HasRegistrationDate returns a boolean if a field has been set.
func (o *RegisteredEntry) HasRegistrationDate() bool {
	if o != nil && o.RegistrationDate.IsSet() {
		return true
	}

	return false
}

// SetRegistrationDate gets a reference to the given NullableString and assigns it to the RegistrationDate field.
func (o *RegisteredEntry) SetRegistrationDate(v string) {
	o.RegistrationDate.Set(&v)
}
// SetRegistrationDateNil sets the value for RegistrationDate to be an explicit nil
func (o *RegisteredEntry) SetRegistrationDateNil() {
	o.RegistrationDate.Set(nil)
}

// UnsetRegistrationDate ensures that no value is present for RegistrationDate, not even an explicit nil
func (o *RegisteredEntry) UnsetRegistrationDate() {
	o.RegistrationDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEntry) GetEndDate() string {
	if o == nil || IsNil(o.EndDate.Get()) {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEntry) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *RegisteredEntry) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *RegisteredEntry) SetEndDate(v string) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *RegisteredEntry) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *RegisteredEntry) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetRegister returns the Register field value
func (o *RegisteredEntry) GetRegister() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Register
}

// GetRegisterOk returns a tuple with the Register field value
// and a boolean to check if the value has been set.
func (o *RegisteredEntry) GetRegisterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Register, true
}

// SetRegister sets field value
func (o *RegisteredEntry) SetRegister(v string) {
	o.Register = v
}

// GetAuthority returns the Authority field value
func (o *RegisteredEntry) GetAuthority() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value
// and a boolean to check if the value has been set.
func (o *RegisteredEntry) GetAuthorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authority, true
}

// SetAuthority sets field value
func (o *RegisteredEntry) SetAuthority(v string) {
	o.Authority = v
}

func (o RegisteredEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisteredEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Descriptions) {
		toSerialize["descriptions"] = o.Descriptions
	}
	if o.RegistrationDate.IsSet() {
		toSerialize["registrationDate"] = o.RegistrationDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	toSerialize["register"] = o.Register
	toSerialize["authority"] = o.Authority
	return toSerialize, nil
}

func (o *RegisteredEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"register",
		"authority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisteredEntry := _RegisteredEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisteredEntry)

	if err != nil {
		return err
	}

	*o = RegisteredEntry(varRegisteredEntry)

	return err
}

type NullableRegisteredEntry struct {
	value *RegisteredEntry
	isSet bool
}

func (v NullableRegisteredEntry) Get() *RegisteredEntry {
	return v.value
}

func (v *NullableRegisteredEntry) Set(val *RegisteredEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredEntry(val *RegisteredEntry) *NullableRegisteredEntry {
	return &NullableRegisteredEntry{value: val, isSet: true}
}

func (v NullableRegisteredEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


